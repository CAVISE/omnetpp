[General]
#debug-on-errors = true
#record-eventlog = true
#eventlog-message-detail-pattern = Packet:declaredOn(Packet) or bitLength
#eventlog-message-detail-pattern = *

**.appType = "App"
**.app.packetLength = 4096 bytes
**.sendIaTime = exponential(1000ms)

[Net60CutThrough]
network = networks.Net60
description = "60 node network with cut-through switching"
**.app.packetLength = 32768 bytes
**.useCutThroughSwitching = true  # let packets flow through the routers
**.destAddresses = "1 50"
**.sendIaTime = uniform(1ms, 5ms)

[Net60StoreAndForward]
network = networks.Net60
description = "60 node network with store-and-forward switching"
**.app.packetLength = 32768 bytes
**.destAddresses = "1 50"
**.sendIaTime = uniform(1ms, 5ms)

[Net60Bursty]
network = networks.Net60
**.appType = "BurstyApp"  # override "App" in [General]
**.app.packetLength = intuniform(2048 byte, 16384 byte)
**.destAddresses = "1 50"

[Net60a]
network = networks.Net60a
**.destAddresses = "1 28 50"

[Net5]
network = networks.Net5
**.destAddresses = "1 3"
**.sendIaTime = uniform(500ms, 1500ms)  # high traffic

[Net5SaturatedQueue]  # Note: this config is used by the Python/Pandas tutorial -- do not touch!
network = networks.Net5
sim-time-limit = 200s
**.frameCapacity = 10
**.destAddresses = "1 4"
**.sendIaTime = uniform(100ms, 500ms)  # high traffic
**.app.packetLength = intuniform(50 bytes, 4096 bytes)
**.channel.*.result-recording-modes = -vector  # turn off vectors from channels
**.result-recording-modes = all  # turn on recording of optional vectors

[Net10]
network = networks.Net10
**.app.packetLength = intuniform(128 byte, 1024 byte)
**.destAddresses = "1 6 8"

[Net10Experiment]
network = networks.Net10
**.destAddresses = "1"
**.app.sendIaTime = exponential(${iaMean = 170..400 step 10 } ms)
**.queue[*].useCutThroughSwitching = ${cutThrough = false, true }
**.queue[*].frameCapacity = 100
**.vector-recording = false
sim-time-limit = 1200s

[RandomGraph]
network = networks.RandomGraph
**.destAddresses = "0 2"

[Mesh]
network = networks.Mesh
**.destAddresses = "0 18 52"

[RandomMesh]
network = networks.RandomMesh
**.destAddresses = "0 18 52"

[Dumbbell]
network = networks.Dumbbell
*.nodeL[*].**.destAddresses = "201 202"
*.nodeR[*].**.destAddresses = "101 102"
**.sendIaTime = exponential(320ms)

[NetBuilder]
network = networks.Dynamic
print-unused-config = false  # check would run before network is built -> false positives
**.address = int(replace(fullName(), "rte", ""))
**.destAddresses = "1 50"
**.sendIaTime = exponential(1s)

[FromCsv]
description = "Setting up a network specified in CSV, using Python"
network = networks.FromCsv
**.address = int(replace(fullName(), "rte", ""))
**.destAddresses = "1 50"

[RandomTree]
description = "Setting up a network generated with the NetworkX Python package"
network = networks.RandomTree
**.address = int(replace(fullName(), "rte", ""))
**.destAddresses = "1 20"
*.n = 50

[DumbbellFaultyLink]
description = "Features a scenario manager written in Python"
extends = Dumbbell
network = networks.DumbbellScenario

[AppExt]
description = "Extending App, a C++ simple module from Python"
network = networks.Net5
**.appType = "AppExt"
**.destAddresses = "0 3"
**.app.packetLength = 4096 bytes

[App2]
description = "App parameterized using pyeval()/pycode()"
network = networks.Net5
**.destAddresses = "0 3"
**.appType = "App2"
**.app.packetLength = 4096 bytes

**.app.iaTimes = pyeval('[0.01, 0.01, 0.5] * 100')
#**.app.iaTimes = pyeval('[random.random() for _ in range(100)]')  # note: this one uses Python's RNG which is not optimal
#**.app.iaTimes = pyeval('[this.exponential(0.1) for _ in range(100)]')
#**.app.iaTimes = pycode('import math; return [0.1 * (1.5 + math.cos(i/10.0)) for i in range(1000)]')  # note: must use pycode() because of the necessary import

#**.app.iaTimes = pycode('with open("iaTimes.txt", "r") as f: return [float(s) for s in f.read().split(",")]')
#**.app.iaTimes = pyeval('[float(s) for s in open("iaTimes.txt", "r").read().split(",")]')
#**.app.iaTimes = pyeval('fileName: [float(s) for s in open(fileName, "r").read().split(",")]', "iaTimes.txt")
#**.app.iaTimes = pycode('fileName: with open(fileName, "r") as f: return [float(s) for s in f.read().split(",")]', "iaTimes.txt")

#**.app.iaTimes = pycode('import routing_utils as ru; return ru.readDataFile("iaTimes.txt")')  # see routing_utils.py in project root
#**.app.iaTimes = pycode('fileName: import routing_utils as ru; return ru.readDataFile(fileName)', "iaTimes.txt")  # see routing_utils.py in project root

