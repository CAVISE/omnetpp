== macOS

=== Supported Releases

This chapter provides additional information for installing @OMNETPP@ on
macOS.

The following releases are covered:

* macOS 10.12

=== Installing the Prerequisite Packages

 * Install the Java Runtime from http://support.apple.com/kb/DL1572 , because
   masOS does not provide it by default. Additionally you must install the latest
   version of Java Runtime Environment from http://java.com (version 8 or later.)
 * Install the command line developer tools for macOS from
   http://developer.apple.com/downloads/index.action?=Command%20Line%20Tools
   (you will need a free Apple Developer Account for the download.)

Installing additional packages will enable more functionality in @OMNETPP@; see
the 'Additional packages' section at the end of this chapter.

=== Additional Steps Required on macOS to Use GDB as the Debugger.

The Command Line Tools package on macOS no longer contains gcc and gdb;
instead it contains the Clang compiler and lldb. (The `gcc` and `g++` commands
actually run `clang`.) @OMNETPP@ will use Clang automatically. However, the
@OMNETPP@ IDE can only use gdb as the underlying debugger, but not lldb.

To be able to debug from the IDE, you have to install gdb from Homebrew.
Alternatively, you can use XCode for debugging.

To do the former, first install the Homebrew package manager at http://brew.sh.
Follow the instrunctions on the website.

Then you can install gdb:

    $ brew install gdb

macOS 10.10 and later requires that you sign the `gdb` executable with a self-signed
certificate (or with your own certificate, if you have one.)

Start the 'Keychain Access' application. Choose 'Keychain Access > Certificate
Assistant > Create a Certificate...' from the menu.

Choose a name (e.g. `gdb-cert`), set 'Identity Type' to 'Self Signed Root', set
'Certificate Type' to 'Code Signing' and select the 'Let me override defaults'.
Click several times on 'Continue' until you get to the 'Specify a
Location For The Certificate' screen, then set 'Keychain' to 'System'.

If you can't store the certificate in the 'System' keychain, create it in the
'Login' keychain, then export it. You can then import it into the 'System' keychain.

Finally, using the context menu for the certificate, select 'Get Info', open
the 'Trust' item, and set 'Code Signing' to 'Always Trust'.

You must quit the 'Keychain Access' application in order to use the certificate and
restart the system.

Now sign the executable:

    $ sudo codesign -s gdb-cert /usr/local/bin/gdb

[NOTE]
==============================================================
The signing procedure has changed on later versions of macOS.
Please consult the following URL for details:
https://sourceware.org/gdb/wiki/PermissionsDarwin
==============================================================

=== Downloading and Unpacking @OMNETPP@

Download @OMNETPP@ from {DOWNLOADSITE}. Make sure you select to download
the generic archive, `@omnetpp@-@version@-src-macosx.tgz`.

Copy the archive to the directory where you want to install it. This is usually
your home directory, `/Users/<you>`. Open a terminal, and extract the archive
using the following command:

    $ tar zxvf @omnetpp@-@version@-src-macosx.tgz

A subdirectory called `@omnetpp@-@version@` will be created, containing the simulator
files.

Alternatively, you can also unpack the archive using Finder.

[NOTE]
===============================================================
The Terminal can be found in the Applications / Utilities
folder.
// do NOT make this a single line, or asciidoc goes berzerk!
===============================================================


=== Environment Variables

@OMNETPP@ needs its `bin/` and `tools/macosx/bin` directories to be in the path.
To add them to `PATH` temporarily (in the current shell only), change into the @OMNETPP@
directory and source the `setenv` script:

  $ cd @omnetpp@-@version@
  $ . setenv

To set the environment variables permanently, edit `.bashrc` in your home
directory. Use your favourite text editor to edit `.bashrc`, for example TextEdit:

  $ touch ~/.bashrc
  $ open -e ~/.bashrc

[NOTE]
===============================================================
`touch` is needed because `open -e` only opens existing files. Alternatively,
you can use the terminal-based 'pico' editor (`pico ~/.bashrc`)
===============================================================

Add the following line at the end of the file, then save it:

  export PATH=$HOME/@omnetpp@-@version@/bin:$HOME/@omnetpp@-@version@/tools/macosx/bin:$PATH
  export QT_PLUGIN_PATH=$HOME/@omnetpp@-@version@/tools/macosx/plugins

You need to close and re-open the terminal for the changes to take effect.

Alternatively, you can put the above line into `~/.bash_profile`, but then
you need to log out and log in again for the changes to take effect.

[NOTE]
===============================================================
If you use a shell other than the default one, 'bash', consult the man page
of that shell to find out which startup file to edit, and how to set and
export variables.
===============================================================


=== Configuring and Building @OMNETPP@

Check `configure.user` to make sure it contains the settings you need.
In most cases you don't need to change anything in it.


In the top-level @OMNETPP@ directory, type:

  $ ./configure

The `configure` script detects installed software and configuration of your
system. It writes the results into the `Makefile.inc` file, which will be
read by the makefiles during the build process.

Normally, the `configure` script needs to be running under the graphical
environment in order to test for `wish`, the Tcl/Tk shell. If you are
logged in via an ssh session or you want to compile @OMNETPP@ without Tcl/Tk
and/or Qtenv, use the command

  $ ./configure WITH_TKENV=no WITH_QTENV=no

instead of plain `./configure`.

[NOTE]
===============================================================
If there is an error during `configure`, the output may give hints about what
went wrong. Scroll up to see the messages. (You may need to increase
the scrollback buffer size of the terminal and re-run `./configure`.) The script
also writes a very detailed log of its operation into `config.log` to help track
down errors. Since `config.log` is very long, it is recommended that you open
it in an editor and search for phrases like 'error' or the name of the package
associated with the problem.
===============================================================

When `./configure` has finished, you can compile @OMNETPP@.
Type in the terminal:

  $ make

[TIP]
===============================================================
To take advantage of multiple processor cores, add the `-j4` option to the
`make` command line.
===============================================================

[NOTE]
===============================================================
The build process will not write anything outside its directory,
so no special privileges are needed.
===============================================================

[TIP]
===============================================================
The make command will seemingly compile everything twice. This is because
both debug and optimized versions of the libraries are built.
If you only want to build one set of the libraries, specify
`MODE=debug` or `MODE=release`:

  $ make MODE=release
===============================================================


=== Verifying the Installation

You can now verify that the sample simulations run correctly. For example,
the dyna simulation is started by entering the following commands:

    $ cd samples/aloha
    $ ./aloha

By default, the samples will run using the Qtenv environment. You should see
nice gui windows and dialogs.


=== Starting the IDE

@OMNETPP@ comes with an Eclipse-based Simulation IDE. On macOS 10.10 (Lion) or later,
the Java Runtime must be installed (see prerequisites) before you can use the IDE.
Start the IDE by typing:

    $ @omnetpp@

If you would like to be able to launch the IDE via Applications,
the Dock or a desktop shortcut, do the following: open the `@omnetpp@-@version@`
folder in Finder, go into the `ide` subfolder, create an alias for the @omnetpp@
program there (right-click, 'Make Alias'), and drag the new alias into the
Applications folder, onto the Dock, or onto the desktop.

Alternatively, run one or both of the commands below:

  $ make install-menu-item
  $ make install-desktop-icon

which will do roughly the same.


=== Using the IDE

When you try to build a project in the IDE, you may get the following warning message:

[quote]
_____________________________________________________________________
Toolchain "..." is not supported on this platform or installation. Please go to the
Project menu, and activate a different build configuration. (You may need to switch
to the C/C++ perspective first, so that the required menu items appear in the Project menu.)
_____________________________________________________________________

If you encounter this message, choose 'Project > Properties > C/C++ Build >
Tool Chain Editor > Current toolchain > GCC for @OMNETPP@'.

The IDE is documented in detail in the 'User Guide'.

=== Reconfiguring the Libraries

If you need to recompile the @OMNETPP@ components with different flags (e.g.
different optimization), then change the top-level @OMNETPP@ directory, edit
`configure.user` accordingly, then type:

    $ ./configure
    $ make clean
    $ make

TIP: To take advantage of multiple processor cores, add the `-j4` option to the
`make` command line.

If you want to recompile just a single library, then change to the directory
of the library (e.g. `cd src/sim`) and type:

    $ make clean
    $ make

By default, libraries are compiled in both debug and release mode. If you want
to make release or debug builds only, use:

    $ make MODE=release

or

    $ make MODE=debug

By default, shared libraries will be created. If you want to build static
libraries, set `SHARED_LIBS=no` in `configure.user` and re-configure your
project.

[NOTE]
===============================================================
The built libraries and programs are immediately copied
to the `lib/` and `bin/` subdirectories.
===============================================================

[NOTE]
===============================================================
The Tcl/Tk environment uses the native Aqua version of Tcl/Tk, so you
will see native widgets. However, due to problems in the Tk/Aqua port,
you may experience minor UI quirks. We recommend using Qtenv whenever
it is possible.
===============================================================


=== Additional Packages

==== OpenMPI

MacOS does not come with OpenMPI, so you must install it manually.
You can install it from the Homebrew repo (http://brew.sh) by typing
`brew install open-mpi`. In this case, you have to manually set
the MPI_CFLAGS and MPI_LIBS variables in `configure.user` and re-run
`./configure`.

==== GraphViz

GraphViz is needed if you want to have diagrams in HTML documentation
that you generate from NED files in the IDE ('Generate NED Documentation...'
item in the project context menu).

You can install it from the Homebrew project (http://brew.sh) by typing
`brew install graphviz`.

After installation, make sure that the `dot` program is available
from the command line. Open a terminal, and type

  $ dot -V

Note the capital 'V'. The command should normally work out of the box.
If you get the '"command not found"' error, you need to put `dot` into the path.
Find the `dot` program in the GraphViz installation directory, and
soft link it into `/usr/local/bin` (`sudo ln -s <path>/dot /usr/local/bin`).

==== Doxygen

Doxygen is needed if you want to generate documentation for C++ code,
as part of the HTML documentation that you generate from NED files in the IDE
('Generate NED Documentation...' item in the project context menu).

You can install it from the Homebrew project (http://brew.sh) by typing
`homebrew install doxygen`.

After installation, ensure that the `doxygen` program is available
from the command line. Open a terminal, and type

  $ doxygen

==== Akaroa

Akaroa 2.7.9, which is the latest version at the time of writing, does not
support macOS. You may try to port it using the porting guide from the
Akaroa distribution.

ifdef::OMNEST[]

==== SystemC

SystemC integration is not available on macOS, because the bundled
SystemC reference implementation does not currently support macOS.

endif::OMNEST[]
